# Head

- Now attempts to simplify OFFSET() functions out of the spreadsheet at compile time (the function is NOT supported at runtime)

# 0.1.9

- Removed chartsheets from the list of worksheets

# 0.1.8

- Remove newlines from excel formulae. This may turn out to be a bad idea (newlines in strings in formulae?) but needed for now.
- Implemented the LARGE(array,k) excel function in C and in Ruby

# 0.1.7

- Implemented the INT(number) excel function in C and in Ruby.

# 0.1.6

- named_references_to_keep can now be set to as :all to create getters for all named references
- named_references_that_can_be_set_at_runtime can now be set to :where_possible to create setters for named references that point to settable cells

# 0.1.5

- map_formulae_to_values now caches its results, which dramatically speeds up some edge-case long formulae
- Fixed an error in the way the C version of excel's IF function was implemented. It no longer returns an error if the unused argument is an error.
- Fixed an error in the way that the ruby shim for the C version handled functions that return ranges (appears when trying to access named reference ranges)
- Now transfer named references into cells to keep early in the process so that referenced but empty cells are kept in final results

# 0.1.4

- Changed from requiring Ruby 1.9 to requiring 1.9 or newer. 

# 0.1.3

- Closed #9 a bug which left Getsetranges where it shouldn't be.
- Closed #10 a bug that gave named references a prefix of '_'

# 0.1.2

- C version: Fixed naming of common methods
- Updated the way that command tests are run
- Merged energynumbers memory freeing code

# 0.1.1

- C version: now optionally writes out accessors for named references
- C version: shim can now get and set arrays of values, where the underlying C code supports it (which is only the case for some named references)
- C version: fixed bug in mapping of sheet names that could occur if two sheets had similar names

# 0.1.0

- BACKWARDS INCOMPATIBLE CHANGE: The ExcelValue struct in the Ruby FFI interface that is generated when compiling excel to C now gives type 'pointer' to its 'string' attribute. This is so that string values can be written through the FFI interface as well as read.

- C version now generates a Shim class that automatically translates between ruby values and excel values. This makes it closer to being drop in compatible with the Ruby version.

# 0.0.14

- Fix parsing of non-western characters in formulae and named references

# 0.0.13

- Fix homepage in gem

# 0.0.12

- By default, the generated tests for the generated code are more relaxed about how closely numbers match.
- Command line option to generate tests that require an exact match

# 0.0.11

- Better handling of shared formulae in Excel: copes with cells that are exceptions to the general sharing rule

# 0.0.10

- Increased the default heap size for the memory to be freed later heap

# 0.0.9

- Memory used by generated C code can now be freed, reducing memory leak

# 0.0.8

- Simplified the code by making it automatically generate filenames for intermediate files
- Added a script to clean up the examples directory
- Fix bug that removed too many cells if the user hadn't specified the cells that they wished to keep

# 0.0.7

- The dynamic library name is no longer hardwired in the generated C makefile
- Better defaults for which cells are considered settable

# 0.0.6

- Ensure that if you have explicitly made a cell settable, it always appears in the resulting, even if it is blank or unneeded by the output functions

# 0.0.5

- Fixed intermittent bug in average function of excel_to_c_runtime.c

# 0.0.4

- Specifing an output name in snake_case will now cause camel case ruby module names to be created (e.g., --output-name simple_model causes a class called SimpleModel to be created )
- Fixed bug where rubypeg dependency was not specified.

# 0.0.3

- Refactoring
- Fixed bug when specifying individual cell dependencies

# 0.0.2

Added an option to just keep intermediate files in memory rather than writing them to disk

# 0.0.1

First release as a gem
